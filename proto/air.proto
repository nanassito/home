syntax = "proto3";

package air.service;
option go_package = "github.com/nanassito/home/pkg/proto/air;air_proto";

import "google/api/annotations.proto";


enum Control {
    CONTROL_UNKNOWN = 0;
    CONTROL_AUTO = 1;
    CONTROL_APP = 2;
    CONTROL_REMOTE = 3;
}


enum HvacMode {
    MODE_UNKNOWN = 0;
    MODE_OFF = 1;
    MODE_FAN_ONLY = 2;
    MODE_COOL = 3;
    MODE_HEAT = 4;
    MODE_AUTO = 5;
}


enum HvacFan {
    FAN_UNKNOWN = 0;
    FAN_AUTO = 1;
    FAN_MEDIUM = 2;
    FAN_HIGH = 3;
}


message ReqListRooms {}
message RspListRooms {
    
}

message ReqListHvacs {
    string room = 1;
}
message RspListHvacs {
    string room = 1;
    repeated string hvacs = 2;
}

message ReqListSensors {
    string room = 1;
}
message RspListSensors {
    message Sensor {
        enum Type {
            UNDEFINED = 0;
            STANDALONE = 1;
            IN_UNIT = 2;
        }

        Type sensorType = 1;
        map<string, string> promLabels = 2;
    }

    string room = 1;
    repeated Sensor sensors = 2;
}

message ReqCheckRoom {
    string room = 1;
}
message RspCheckRoom {
    string room = 1;
    double actualTemperature = 2;
    map<string, double> inUnitTemperatures = 3;
    optional double minDesiredTemperature = 4;
    optional double maxDesiredTemperature = 5;
    Control control = 6;
    optional HvacMode mode = 7;
    optional HvacFan fan = 8;
}

message ReqCheckHvac {
    string hvac = 1;
}
message RspCheckHvac {
    string hvac = 1;
    double targetTemperature = 2;
    HvacMode mode = 3;
    HvacFan fan = 4;
}

message ReqConfigureRoom {
    string room = 1;
    Control control = 2;
    optional HvacMode mode = 3;
    optional HvacFan fan = 4;
    optional double minDesiredTemperature = 5;
    optional double maxDesiredTemperature = 6;
}
message RspConfigureRoom {
    string room = 1;
    Control control = 2;
    optional HvacMode mode = 3;
    optional HvacFan fan = 4;
    optional double minDesiredTemperature = 5;
    optional double maxDesiredTemperature = 6;
}

message ReqConfigureHvac {
    string hvac = 1;
    HvacMode mode = 2;
    optional HvacFan fan = 3;
    optional double targetTemperature = 4;
}
message RspConfigureHvac {
    string hvac = 1;
    HvacMode mode = 2;
    optional HvacFan fan = 3;
    optional double targetTemperature = 4;
}


service AirSvc {
    rpc ListRooms (ReqListRooms) returns (RspListRooms) {
        option (google.api.http) = {
            get: "/rooms/list"
        };
    };
    rpc ListHvacs (ReqListHvacs) returns (RspListHvacs) {
        option (google.api.http) = {
            get: "/hvacs/list"
        };
    };
    rpc ListSensors (ReqListSensors) returns (RspListSensors) {
        option (google.api.http) = {
            get: "/sensors/list"
        };
    };

    rpc CheckRoom (ReqCheckRoom) returns (RspCheckRoom) {
        option (google.api.http) = {
            get: "/room/check"
        };
    }
    rpc CheckHvac (ReqCheckHvac) returns (RspCheckHvac) {
        option (google.api.http) = {
            get: "/hvac/check"
        };
    }

    rpc ConfigureRoom (ReqConfigureRoom) returns (RspConfigureRoom) {
        option (google.api.http) = {
            post: "/room/config"
        };
    }
    rpc ConfigureHvac (ReqConfigureHvac) returns (RspConfigureHvac) {
        option (google.api.http) = {
            post: "/hvac/config"
        };
    }
}


// For internal use only. Used to load init data from disk.
message AirConfig {
    message Room {
        message Hvac {
            string SetModeMqttTopic = 1;
            string reportModeMqttTopic = 2;
            string SetFanMqttTopic = 3;
            string reportFanMqttTopic = 4;
            string SetTemperatureMqttTopic = 5;
            string reportTemperatureMqttTopic = 6;
        }
        
        map<string, Hvac> hvacs = 1;
        double defaultMinTemperature = 2;
        double defaultMaxTemperature = 3;
        map<string, string> sensorPromLabels = 5;
    }

    map<string, Room> rooms = 1;
    map<string, string> outsideSensorPromLabels = 2;
}