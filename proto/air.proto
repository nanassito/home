syntax = "proto3";

package air.service;
option go_package = "github.com/nanassito/home/pkg/proto/air;air_proto";

import "google/api/annotations.proto";


message TemperatureRange {
    double min = 1;
    double max = 2;
}

message Sensor {
    string name = 1;
    double temperature = 2;
    int64 lastReportedAtTs = 3;
}

message Hvac {

    enum Mode {
        MODE_UNKNOWN = 0;
        MODE_OFF = 1;
        MODE_FAN_ONLY = 2;
        MODE_COOL = 3;
        MODE_HEAT = 4;
        MODE_AUTO = 5;
        MODE_DRY = 6;
    }
    
    enum Fan {
        FAN_UNKNOWN = 0;
        FAN_AUTO = 1;
        FAN_LOW = 2;
        FAN_MEDIUM = 3;
        FAN_HIGH = 4;
    }
    
    enum Control {
        CONTROL_UNKNOWN = 0;
        CONTROL_ROOM = 1;
        CONTROL_HVAC = 2;
        CONTROL_NONE = 3;
    }

    message State {
        double temperature = 1;
        Mode mode = 2;
        Fan fan = 3;
    }

    string name = 1;
    Control control = 2;
    State reportedState = 3;
    State desiredState = 4;
    double TemperatureOffset = 5;
}

message Room {
    string name = 1;
    Sensor sensor = 2;

    TemperatureRange desiredTemperatureRange = 4;
}

message Schedule {
    message Window {
        string start = 1;
        string end = 2;
        TemperatureRange settings = 3;
    }

    bool isActive = 1;
    string roomName = 2;
    repeated Window weekday = 3;
    repeated Window weekend = 4;
}

message ServerState {
    Sensor outside = 1;
    map<string, Room> rooms = 2;
    map<string, Hvac> hvacs = 3;
    map<string, Schedule> schedules = 4;
}

message ReqGetAllStates {}
message ReqConfigureRoom {
    string room = 1;
    TemperatureRange desiredTemperatureRange = 2;
}
message ReqConfigureSchedule {
    string id = 1;
    Schedule schedule = 2;
}


service AirSvc {
    rpc GetAllStates(ReqGetAllStates) returns (ServerState) {
        option (google.api.http) = {
            get: "/states"
        };
    }

    rpc ConfigureRoom(ReqConfigureRoom) returns (ServerState) {
        option (google.api.http) = {
            post: "/configure/room"
        };
    }

    rpc ConfigureSchedule(ReqConfigureSchedule) returns (ServerState) {
        option (google.api.http) = {
            post: "/configure/schedule"
        };
    }
}


// For internal use only. Used to load init data from disk.
message AirConfig {
    message Sensor {
        map<string, string> prometheusLabels = 1;
        string mqttTopic = 2;
    }
    message Hvac {
        string room = 1;
        string setModeMqttTopic = 2;
        string reportModeMqttTopic = 3;
        string setFanMqttTopic = 4;
        string reportFanMqttTopic = 5;
        string setTemperatureMqttTopic = 6;
        string reportTemperatureMqttTopic = 7;
        map<string, string> prometheusLabels = 8;
    }

    Sensor outside = 1;
    map<string, Sensor> sensors = 2;
    map<string, Hvac> hvacs = 3;
    map<string, Schedule> schedules = 4;
}