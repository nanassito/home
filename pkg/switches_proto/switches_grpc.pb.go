// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: switches.proto

package switches_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SwitchSvcClient is the client API for SwitchSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwitchSvcClient interface {
	List(ctx context.Context, in *ReqList, opts ...grpc.CallOption) (*RspList, error)
	Activate(ctx context.Context, in *ReqActivate, opts ...grpc.CallOption) (*RspActivate, error)
	Status(ctx context.Context, in *ReqStatus, opts ...grpc.CallOption) (*RspStatus, error)
}

type switchSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSwitchSvcClient(cc grpc.ClientConnInterface) SwitchSvcClient {
	return &switchSvcClient{cc}
}

func (c *switchSvcClient) List(ctx context.Context, in *ReqList, opts ...grpc.CallOption) (*RspList, error) {
	out := new(RspList)
	err := c.cc.Invoke(ctx, "/switch.service.SwitchSvc/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchSvcClient) Activate(ctx context.Context, in *ReqActivate, opts ...grpc.CallOption) (*RspActivate, error) {
	out := new(RspActivate)
	err := c.cc.Invoke(ctx, "/switch.service.SwitchSvc/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchSvcClient) Status(ctx context.Context, in *ReqStatus, opts ...grpc.CallOption) (*RspStatus, error) {
	out := new(RspStatus)
	err := c.cc.Invoke(ctx, "/switch.service.SwitchSvc/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwitchSvcServer is the server API for SwitchSvc service.
// All implementations must embed UnimplementedSwitchSvcServer
// for forward compatibility
type SwitchSvcServer interface {
	List(context.Context, *ReqList) (*RspList, error)
	Activate(context.Context, *ReqActivate) (*RspActivate, error)
	Status(context.Context, *ReqStatus) (*RspStatus, error)
	mustEmbedUnimplementedSwitchSvcServer()
}

// UnimplementedSwitchSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSwitchSvcServer struct {
}

func (UnimplementedSwitchSvcServer) List(context.Context, *ReqList) (*RspList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSwitchSvcServer) Activate(context.Context, *ReqActivate) (*RspActivate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedSwitchSvcServer) Status(context.Context, *ReqStatus) (*RspStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedSwitchSvcServer) mustEmbedUnimplementedSwitchSvcServer() {}

// UnsafeSwitchSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwitchSvcServer will
// result in compilation errors.
type UnsafeSwitchSvcServer interface {
	mustEmbedUnimplementedSwitchSvcServer()
}

func RegisterSwitchSvcServer(s grpc.ServiceRegistrar, srv SwitchSvcServer) {
	s.RegisterService(&SwitchSvc_ServiceDesc, srv)
}

func _SwitchSvc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchSvcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/switch.service.SwitchSvc/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchSvcServer).List(ctx, req.(*ReqList))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchSvc_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqActivate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchSvcServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/switch.service.SwitchSvc/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchSvcServer).Activate(ctx, req.(*ReqActivate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchSvc_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchSvcServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/switch.service.SwitchSvc/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchSvcServer).Status(ctx, req.(*ReqStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// SwitchSvc_ServiceDesc is the grpc.ServiceDesc for SwitchSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwitchSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "switch.service.SwitchSvc",
	HandlerType: (*SwitchSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SwitchSvc_List_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _SwitchSvc_Activate_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _SwitchSvc_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "switches.proto",
}
