// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: air.proto

package air_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AirSvcClient is the client API for AirSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirSvcClient interface {
	GetAllStates(ctx context.Context, in *ReqGetAllStates, opts ...grpc.CallOption) (*ServerState, error)
	ConfigureRoom(ctx context.Context, in *ReqConfigureRoom, opts ...grpc.CallOption) (*ServerState, error)
}

type airSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAirSvcClient(cc grpc.ClientConnInterface) AirSvcClient {
	return &airSvcClient{cc}
}

func (c *airSvcClient) GetAllStates(ctx context.Context, in *ReqGetAllStates, opts ...grpc.CallOption) (*ServerState, error) {
	out := new(ServerState)
	err := c.cc.Invoke(ctx, "/air.service.AirSvc/GetAllStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airSvcClient) ConfigureRoom(ctx context.Context, in *ReqConfigureRoom, opts ...grpc.CallOption) (*ServerState, error) {
	out := new(ServerState)
	err := c.cc.Invoke(ctx, "/air.service.AirSvc/ConfigureRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirSvcServer is the server API for AirSvc service.
// All implementations must embed UnimplementedAirSvcServer
// for forward compatibility
type AirSvcServer interface {
	GetAllStates(context.Context, *ReqGetAllStates) (*ServerState, error)
	ConfigureRoom(context.Context, *ReqConfigureRoom) (*ServerState, error)
	mustEmbedUnimplementedAirSvcServer()
}

// UnimplementedAirSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAirSvcServer struct {
}

func (UnimplementedAirSvcServer) GetAllStates(context.Context, *ReqGetAllStates) (*ServerState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStates not implemented")
}
func (UnimplementedAirSvcServer) ConfigureRoom(context.Context, *ReqConfigureRoom) (*ServerState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureRoom not implemented")
}
func (UnimplementedAirSvcServer) mustEmbedUnimplementedAirSvcServer() {}

// UnsafeAirSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirSvcServer will
// result in compilation errors.
type UnsafeAirSvcServer interface {
	mustEmbedUnimplementedAirSvcServer()
}

func RegisterAirSvcServer(s grpc.ServiceRegistrar, srv AirSvcServer) {
	s.RegisterService(&AirSvc_ServiceDesc, srv)
}

func _AirSvc_GetAllStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAllStates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirSvcServer).GetAllStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/air.service.AirSvc/GetAllStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirSvcServer).GetAllStates(ctx, req.(*ReqGetAllStates))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirSvc_ConfigureRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqConfigureRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirSvcServer).ConfigureRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/air.service.AirSvc/ConfigureRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirSvcServer).ConfigureRoom(ctx, req.(*ReqConfigureRoom))
	}
	return interceptor(ctx, in, info, handler)
}

// AirSvc_ServiceDesc is the grpc.ServiceDesc for AirSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "air.service.AirSvc",
	HandlerType: (*AirSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllStates",
			Handler:    _AirSvc_GetAllStates_Handler,
		},
		{
			MethodName: "ConfigureRoom",
			Handler:    _AirSvc_ConfigureRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "air.proto",
}
