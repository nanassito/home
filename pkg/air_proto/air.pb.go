// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: air.proto

package air_proto

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Hvac_Mode int32

const (
	Hvac_MODE_UNKNOWN  Hvac_Mode = 0
	Hvac_MODE_OFF      Hvac_Mode = 1
	Hvac_MODE_FAN_ONLY Hvac_Mode = 2
	Hvac_MODE_COOL     Hvac_Mode = 3
	Hvac_MODE_HEAT     Hvac_Mode = 4
	Hvac_MODE_AUTO     Hvac_Mode = 5
	Hvac_MODE_DRY      Hvac_Mode = 6
)

// Enum value maps for Hvac_Mode.
var (
	Hvac_Mode_name = map[int32]string{
		0: "MODE_UNKNOWN",
		1: "MODE_OFF",
		2: "MODE_FAN_ONLY",
		3: "MODE_COOL",
		4: "MODE_HEAT",
		5: "MODE_AUTO",
		6: "MODE_DRY",
	}
	Hvac_Mode_value = map[string]int32{
		"MODE_UNKNOWN":  0,
		"MODE_OFF":      1,
		"MODE_FAN_ONLY": 2,
		"MODE_COOL":     3,
		"MODE_HEAT":     4,
		"MODE_AUTO":     5,
		"MODE_DRY":      6,
	}
)

func (x Hvac_Mode) Enum() *Hvac_Mode {
	p := new(Hvac_Mode)
	*p = x
	return p
}

func (x Hvac_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hvac_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_air_proto_enumTypes[0].Descriptor()
}

func (Hvac_Mode) Type() protoreflect.EnumType {
	return &file_air_proto_enumTypes[0]
}

func (x Hvac_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hvac_Mode.Descriptor instead.
func (Hvac_Mode) EnumDescriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{2, 0}
}

type Hvac_Fan int32

const (
	Hvac_FAN_UNKNOWN Hvac_Fan = 0
	Hvac_FAN_AUTO    Hvac_Fan = 1
	Hvac_FAN_LOW     Hvac_Fan = 2
	Hvac_FAN_MEDIUM  Hvac_Fan = 3
	Hvac_FAN_HIGH    Hvac_Fan = 4
)

// Enum value maps for Hvac_Fan.
var (
	Hvac_Fan_name = map[int32]string{
		0: "FAN_UNKNOWN",
		1: "FAN_AUTO",
		2: "FAN_LOW",
		3: "FAN_MEDIUM",
		4: "FAN_HIGH",
	}
	Hvac_Fan_value = map[string]int32{
		"FAN_UNKNOWN": 0,
		"FAN_AUTO":    1,
		"FAN_LOW":     2,
		"FAN_MEDIUM":  3,
		"FAN_HIGH":    4,
	}
)

func (x Hvac_Fan) Enum() *Hvac_Fan {
	p := new(Hvac_Fan)
	*p = x
	return p
}

func (x Hvac_Fan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hvac_Fan) Descriptor() protoreflect.EnumDescriptor {
	return file_air_proto_enumTypes[1].Descriptor()
}

func (Hvac_Fan) Type() protoreflect.EnumType {
	return &file_air_proto_enumTypes[1]
}

func (x Hvac_Fan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hvac_Fan.Descriptor instead.
func (Hvac_Fan) EnumDescriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{2, 1}
}

type Hvac_Control int32

const (
	Hvac_CONTROL_UNKNOWN Hvac_Control = 0
	Hvac_CONTROL_ROOM    Hvac_Control = 1
	Hvac_CONTROL_HVAC    Hvac_Control = 2
	Hvac_CONTROL_NONE    Hvac_Control = 3
)

// Enum value maps for Hvac_Control.
var (
	Hvac_Control_name = map[int32]string{
		0: "CONTROL_UNKNOWN",
		1: "CONTROL_ROOM",
		2: "CONTROL_HVAC",
		3: "CONTROL_NONE",
	}
	Hvac_Control_value = map[string]int32{
		"CONTROL_UNKNOWN": 0,
		"CONTROL_ROOM":    1,
		"CONTROL_HVAC":    2,
		"CONTROL_NONE":    3,
	}
)

func (x Hvac_Control) Enum() *Hvac_Control {
	p := new(Hvac_Control)
	*p = x
	return p
}

func (x Hvac_Control) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hvac_Control) Descriptor() protoreflect.EnumDescriptor {
	return file_air_proto_enumTypes[2].Descriptor()
}

func (Hvac_Control) Type() protoreflect.EnumType {
	return &file_air_proto_enumTypes[2]
}

func (x Hvac_Control) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hvac_Control.Descriptor instead.
func (Hvac_Control) EnumDescriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{2, 2}
}

type TemperatureRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"`
	Max float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *TemperatureRange) Reset() {
	*x = TemperatureRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureRange) ProtoMessage() {}

func (x *TemperatureRange) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureRange.ProtoReflect.Descriptor instead.
func (*TemperatureRange) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{0}
}

func (x *TemperatureRange) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *TemperatureRange) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Sensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Temperature      float64 `protobuf:"fixed64,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
	LastReportedAtTs int64   `protobuf:"varint,3,opt,name=lastReportedAtTs,proto3" json:"lastReportedAtTs,omitempty"`
}

func (x *Sensor) Reset() {
	*x = Sensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensor) ProtoMessage() {}

func (x *Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensor.ProtoReflect.Descriptor instead.
func (*Sensor) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{1}
}

func (x *Sensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sensor) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *Sensor) GetLastReportedAtTs() int64 {
	if x != nil {
		return x.LastReportedAtTs
	}
	return 0
}

type Hvac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Control           Hvac_Control `protobuf:"varint,2,opt,name=control,proto3,enum=air.service.Hvac_Control" json:"control,omitempty"`
	ReportedState     *Hvac_State  `protobuf:"bytes,3,opt,name=reportedState,proto3" json:"reportedState,omitempty"`
	DesiredState      *Hvac_State  `protobuf:"bytes,4,opt,name=desiredState,proto3" json:"desiredState,omitempty"`
	TemperatureOffset float64      `protobuf:"fixed64,5,opt,name=temperatureOffset,proto3" json:"temperatureOffset,omitempty"`
	FastRamp          bool         `protobuf:"varint,6,opt,name=fastRamp,proto3" json:"fastRamp,omitempty"`
}

func (x *Hvac) Reset() {
	*x = Hvac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hvac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hvac) ProtoMessage() {}

func (x *Hvac) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hvac.ProtoReflect.Descriptor instead.
func (*Hvac) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{2}
}

func (x *Hvac) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Hvac) GetControl() Hvac_Control {
	if x != nil {
		return x.Control
	}
	return Hvac_CONTROL_UNKNOWN
}

func (x *Hvac) GetReportedState() *Hvac_State {
	if x != nil {
		return x.ReportedState
	}
	return nil
}

func (x *Hvac) GetDesiredState() *Hvac_State {
	if x != nil {
		return x.DesiredState
	}
	return nil
}

func (x *Hvac) GetTemperatureOffset() float64 {
	if x != nil {
		return x.TemperatureOffset
	}
	return 0
}

func (x *Hvac) GetFastRamp() bool {
	if x != nil {
		return x.FastRamp
	}
	return false
}

type Room struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sensor                  *Sensor           `protobuf:"bytes,2,opt,name=sensor,proto3" json:"sensor,omitempty"`
	DesiredTemperatureRange *TemperatureRange `protobuf:"bytes,4,opt,name=desiredTemperatureRange,proto3" json:"desiredTemperatureRange,omitempty"`
}

func (x *Room) Reset() {
	*x = Room{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room) ProtoMessage() {}

func (x *Room) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room.ProtoReflect.Descriptor instead.
func (*Room) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{3}
}

func (x *Room) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Room) GetSensor() *Sensor {
	if x != nil {
		return x.Sensor
	}
	return nil
}

func (x *Room) GetDesiredTemperatureRange() *TemperatureRange {
	if x != nil {
		return x.DesiredTemperatureRange
	}
	return nil
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive bool               `protobuf:"varint,1,opt,name=isActive,proto3" json:"isActive,omitempty"`
	RoomName string             `protobuf:"bytes,2,opt,name=roomName,proto3" json:"roomName,omitempty"`
	Weekday  []*Schedule_Window `protobuf:"bytes,3,rep,name=weekday,proto3" json:"weekday,omitempty"`
	Weekend  []*Schedule_Window `protobuf:"bytes,4,rep,name=weekend,proto3" json:"weekend,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{4}
}

func (x *Schedule) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Schedule) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *Schedule) GetWeekday() []*Schedule_Window {
	if x != nil {
		return x.Weekday
	}
	return nil
}

func (x *Schedule) GetWeekend() []*Schedule_Window {
	if x != nil {
		return x.Weekend
	}
	return nil
}

type ServerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outside   *Sensor              `protobuf:"bytes,1,opt,name=outside,proto3" json:"outside,omitempty"`
	Rooms     map[string]*Room     `protobuf:"bytes,2,rep,name=rooms,proto3" json:"rooms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Hvacs     map[string]*Hvac     `protobuf:"bytes,3,rep,name=hvacs,proto3" json:"hvacs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Schedules map[string]*Schedule `protobuf:"bytes,4,rep,name=schedules,proto3" json:"schedules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServerState) Reset() {
	*x = ServerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerState) ProtoMessage() {}

func (x *ServerState) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerState.ProtoReflect.Descriptor instead.
func (*ServerState) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{5}
}

func (x *ServerState) GetOutside() *Sensor {
	if x != nil {
		return x.Outside
	}
	return nil
}

func (x *ServerState) GetRooms() map[string]*Room {
	if x != nil {
		return x.Rooms
	}
	return nil
}

func (x *ServerState) GetHvacs() map[string]*Hvac {
	if x != nil {
		return x.Hvacs
	}
	return nil
}

func (x *ServerState) GetSchedules() map[string]*Schedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

type ReqGetAllStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqGetAllStates) Reset() {
	*x = ReqGetAllStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetAllStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetAllStates) ProtoMessage() {}

func (x *ReqGetAllStates) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetAllStates.ProtoReflect.Descriptor instead.
func (*ReqGetAllStates) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{6}
}

type ReqConfigureRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room                    string            `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	DesiredTemperatureRange *TemperatureRange `protobuf:"bytes,2,opt,name=desiredTemperatureRange,proto3" json:"desiredTemperatureRange,omitempty"`
}

func (x *ReqConfigureRoom) Reset() {
	*x = ReqConfigureRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqConfigureRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqConfigureRoom) ProtoMessage() {}

func (x *ReqConfigureRoom) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqConfigureRoom.ProtoReflect.Descriptor instead.
func (*ReqConfigureRoom) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{7}
}

func (x *ReqConfigureRoom) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *ReqConfigureRoom) GetDesiredTemperatureRange() *TemperatureRange {
	if x != nil {
		return x.DesiredTemperatureRange
	}
	return nil
}

type ReqConfigureSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Schedule *Schedule `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *ReqConfigureSchedule) Reset() {
	*x = ReqConfigureSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqConfigureSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqConfigureSchedule) ProtoMessage() {}

func (x *ReqConfigureSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqConfigureSchedule.ProtoReflect.Descriptor instead.
func (*ReqConfigureSchedule) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{8}
}

func (x *ReqConfigureSchedule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReqConfigureSchedule) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// For internal use only. Used to load init data from disk.
type AirConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outside   *AirConfig_Sensor            `protobuf:"bytes,1,opt,name=outside,proto3" json:"outside,omitempty"`
	Sensors   map[string]*AirConfig_Sensor `protobuf:"bytes,2,rep,name=sensors,proto3" json:"sensors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Hvacs     map[string]*AirConfig_Hvac   `protobuf:"bytes,3,rep,name=hvacs,proto3" json:"hvacs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Schedules map[string]*Schedule         `protobuf:"bytes,4,rep,name=schedules,proto3" json:"schedules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AirConfig) Reset() {
	*x = AirConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirConfig) ProtoMessage() {}

func (x *AirConfig) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirConfig.ProtoReflect.Descriptor instead.
func (*AirConfig) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{9}
}

func (x *AirConfig) GetOutside() *AirConfig_Sensor {
	if x != nil {
		return x.Outside
	}
	return nil
}

func (x *AirConfig) GetSensors() map[string]*AirConfig_Sensor {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *AirConfig) GetHvacs() map[string]*AirConfig_Hvac {
	if x != nil {
		return x.Hvacs
	}
	return nil
}

func (x *AirConfig) GetSchedules() map[string]*Schedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

type Hvac_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temperature float64   `protobuf:"fixed64,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Mode        Hvac_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=air.service.Hvac_Mode" json:"mode,omitempty"`
	Fan         Hvac_Fan  `protobuf:"varint,3,opt,name=fan,proto3,enum=air.service.Hvac_Fan" json:"fan,omitempty"`
}

func (x *Hvac_State) Reset() {
	*x = Hvac_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hvac_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hvac_State) ProtoMessage() {}

func (x *Hvac_State) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hvac_State.ProtoReflect.Descriptor instead.
func (*Hvac_State) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Hvac_State) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *Hvac_State) GetMode() Hvac_Mode {
	if x != nil {
		return x.Mode
	}
	return Hvac_MODE_UNKNOWN
}

func (x *Hvac_State) GetFan() Hvac_Fan {
	if x != nil {
		return x.Fan
	}
	return Hvac_FAN_UNKNOWN
}

type Schedule_Window struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start    string            `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End      string            `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	Settings *TemperatureRange `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *Schedule_Window) Reset() {
	*x = Schedule_Window{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule_Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule_Window) ProtoMessage() {}

func (x *Schedule_Window) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule_Window.ProtoReflect.Descriptor instead.
func (*Schedule_Window) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Schedule_Window) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *Schedule_Window) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *Schedule_Window) GetSettings() *TemperatureRange {
	if x != nil {
		return x.Settings
	}
	return nil
}

type AirConfig_Sensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrometheusLabels map[string]string `protobuf:"bytes,1,rep,name=prometheusLabels,proto3" json:"prometheusLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MqttTopic        string            `protobuf:"bytes,2,opt,name=mqttTopic,proto3" json:"mqttTopic,omitempty"`
}

func (x *AirConfig_Sensor) Reset() {
	*x = AirConfig_Sensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirConfig_Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirConfig_Sensor) ProtoMessage() {}

func (x *AirConfig_Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirConfig_Sensor.ProtoReflect.Descriptor instead.
func (*AirConfig_Sensor) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{9, 0}
}

func (x *AirConfig_Sensor) GetPrometheusLabels() map[string]string {
	if x != nil {
		return x.PrometheusLabels
	}
	return nil
}

func (x *AirConfig_Sensor) GetMqttTopic() string {
	if x != nil {
		return x.MqttTopic
	}
	return ""
}

type AirConfig_Hvac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room                       string            `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	SetModeMqttTopic           string            `protobuf:"bytes,2,opt,name=setModeMqttTopic,proto3" json:"setModeMqttTopic,omitempty"`
	ReportModeMqttTopic        string            `protobuf:"bytes,3,opt,name=reportModeMqttTopic,proto3" json:"reportModeMqttTopic,omitempty"`
	SetFanMqttTopic            string            `protobuf:"bytes,4,opt,name=setFanMqttTopic,proto3" json:"setFanMqttTopic,omitempty"`
	ReportFanMqttTopic         string            `protobuf:"bytes,5,opt,name=reportFanMqttTopic,proto3" json:"reportFanMqttTopic,omitempty"`
	SetTemperatureMqttTopic    string            `protobuf:"bytes,6,opt,name=setTemperatureMqttTopic,proto3" json:"setTemperatureMqttTopic,omitempty"`
	ReportTemperatureMqttTopic string            `protobuf:"bytes,7,opt,name=reportTemperatureMqttTopic,proto3" json:"reportTemperatureMqttTopic,omitempty"`
	PrometheusLabels           map[string]string `protobuf:"bytes,8,rep,name=prometheusLabels,proto3" json:"prometheusLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AirConfig_Hvac) Reset() {
	*x = AirConfig_Hvac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirConfig_Hvac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirConfig_Hvac) ProtoMessage() {}

func (x *AirConfig_Hvac) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirConfig_Hvac.ProtoReflect.Descriptor instead.
func (*AirConfig_Hvac) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{9, 1}
}

func (x *AirConfig_Hvac) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *AirConfig_Hvac) GetSetModeMqttTopic() string {
	if x != nil {
		return x.SetModeMqttTopic
	}
	return ""
}

func (x *AirConfig_Hvac) GetReportModeMqttTopic() string {
	if x != nil {
		return x.ReportModeMqttTopic
	}
	return ""
}

func (x *AirConfig_Hvac) GetSetFanMqttTopic() string {
	if x != nil {
		return x.SetFanMqttTopic
	}
	return ""
}

func (x *AirConfig_Hvac) GetReportFanMqttTopic() string {
	if x != nil {
		return x.ReportFanMqttTopic
	}
	return ""
}

func (x *AirConfig_Hvac) GetSetTemperatureMqttTopic() string {
	if x != nil {
		return x.SetTemperatureMqttTopic
	}
	return ""
}

func (x *AirConfig_Hvac) GetReportTemperatureMqttTopic() string {
	if x != nil {
		return x.ReportTemperatureMqttTopic
	}
	return ""
}

func (x *AirConfig_Hvac) GetPrometheusLabels() map[string]string {
	if x != nil {
		return x.PrometheusLabels
	}
	return nil
}

var File_air_proto protoreflect.FileDescriptor

var file_air_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x69, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x10, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x6a,
	0x0a, 0x06, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x54, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x54, 0x73, 0x22, 0xb2, 0x05, 0x0a, 0x04, 0x48,
	0x76, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3d, 0x0a, 0x0d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x48, 0x76, 0x61, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x73, 0x74, 0x52, 0x61,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x73, 0x74, 0x52, 0x61,
	0x6d, 0x70, 0x1a, 0x7e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x69,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x03, 0x66, 0x61, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x2e, 0x46, 0x61, 0x6e, 0x52, 0x03, 0x66,
	0x61, 0x6e, 0x22, 0x74, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x52, 0x59, 0x10, 0x06, 0x22, 0x4f, 0x0a, 0x03, 0x46, 0x61, 0x6e, 0x12,
	0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x41, 0x4e, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46,
	0x41, 0x4e, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x41, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x22, 0x54, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x48, 0x56, 0x41, 0x43, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x22,
	0xa0, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61,
	0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x57, 0x0a, 0x17, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x17, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x12,
	0x36, 0x0a, 0x07, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x07,
	0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x1a, 0x6b, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0xe8, 0x03, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x39,
	0x0a, 0x05, 0x68, 0x76, 0x61, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x68, 0x76, 0x61, 0x63, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x1a, 0x4b, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a,
	0x0a, 0x48, 0x76, 0x61, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61,
	0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x11, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x22, 0x7f, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x57, 0x0a, 0x17, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x17, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x59, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xca,
	0x09, 0x0a, 0x09, 0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x69, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x68, 0x76, 0x61, 0x63, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x76, 0x61, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x68, 0x76, 0x61, 0x63, 0x73, 0x12, 0x43, 0x0a,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x1a, 0xcc, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x5f, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x43, 0x0a, 0x15,
	0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xf0, 0x03, 0x0a, 0x04, 0x48, 0x76, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x4d, 0x71, 0x74,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x61, 0x6e, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x6e, 0x4d, 0x71, 0x74,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x5d, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x69, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65,
	0x75, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a,
	0x43, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x55, 0x0a, 0x0a, 0x48, 0x76, 0x61, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x69, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xb3, 0x02, 0x0a, 0x06,
	0x41, 0x69, 0x72, 0x53, 0x76, 0x63, 0x12, 0x57, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x1a, 0x18, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x0f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x61, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x12, 0x1d, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x71, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x1a,
	0x18, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x22, 0x0f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x6f, 0x6d, 0x12, 0x6d, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x18, 0x2e, 0x61, 0x69, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6e, 0x61, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x74, 0x6f, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x69, 0x72, 0x3b, 0x61, 0x69, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_air_proto_rawDescOnce sync.Once
	file_air_proto_rawDescData = file_air_proto_rawDesc
)

func file_air_proto_rawDescGZIP() []byte {
	file_air_proto_rawDescOnce.Do(func() {
		file_air_proto_rawDescData = protoimpl.X.CompressGZIP(file_air_proto_rawDescData)
	})
	return file_air_proto_rawDescData
}

var file_air_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_air_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_air_proto_goTypes = []interface{}{
	(Hvac_Mode)(0),               // 0: air.service.Hvac.Mode
	(Hvac_Fan)(0),                // 1: air.service.Hvac.Fan
	(Hvac_Control)(0),            // 2: air.service.Hvac.Control
	(*TemperatureRange)(nil),     // 3: air.service.TemperatureRange
	(*Sensor)(nil),               // 4: air.service.Sensor
	(*Hvac)(nil),                 // 5: air.service.Hvac
	(*Room)(nil),                 // 6: air.service.Room
	(*Schedule)(nil),             // 7: air.service.Schedule
	(*ServerState)(nil),          // 8: air.service.ServerState
	(*ReqGetAllStates)(nil),      // 9: air.service.ReqGetAllStates
	(*ReqConfigureRoom)(nil),     // 10: air.service.ReqConfigureRoom
	(*ReqConfigureSchedule)(nil), // 11: air.service.ReqConfigureSchedule
	(*AirConfig)(nil),            // 12: air.service.AirConfig
	(*Hvac_State)(nil),           // 13: air.service.Hvac.State
	(*Schedule_Window)(nil),      // 14: air.service.Schedule.Window
	nil,                          // 15: air.service.ServerState.RoomsEntry
	nil,                          // 16: air.service.ServerState.HvacsEntry
	nil,                          // 17: air.service.ServerState.SchedulesEntry
	(*AirConfig_Sensor)(nil),     // 18: air.service.AirConfig.Sensor
	(*AirConfig_Hvac)(nil),       // 19: air.service.AirConfig.Hvac
	nil,                          // 20: air.service.AirConfig.SensorsEntry
	nil,                          // 21: air.service.AirConfig.HvacsEntry
	nil,                          // 22: air.service.AirConfig.SchedulesEntry
	nil,                          // 23: air.service.AirConfig.Sensor.PrometheusLabelsEntry
	nil,                          // 24: air.service.AirConfig.Hvac.PrometheusLabelsEntry
}
var file_air_proto_depIdxs = []int32{
	2,  // 0: air.service.Hvac.control:type_name -> air.service.Hvac.Control
	13, // 1: air.service.Hvac.reportedState:type_name -> air.service.Hvac.State
	13, // 2: air.service.Hvac.desiredState:type_name -> air.service.Hvac.State
	4,  // 3: air.service.Room.sensor:type_name -> air.service.Sensor
	3,  // 4: air.service.Room.desiredTemperatureRange:type_name -> air.service.TemperatureRange
	14, // 5: air.service.Schedule.weekday:type_name -> air.service.Schedule.Window
	14, // 6: air.service.Schedule.weekend:type_name -> air.service.Schedule.Window
	4,  // 7: air.service.ServerState.outside:type_name -> air.service.Sensor
	15, // 8: air.service.ServerState.rooms:type_name -> air.service.ServerState.RoomsEntry
	16, // 9: air.service.ServerState.hvacs:type_name -> air.service.ServerState.HvacsEntry
	17, // 10: air.service.ServerState.schedules:type_name -> air.service.ServerState.SchedulesEntry
	3,  // 11: air.service.ReqConfigureRoom.desiredTemperatureRange:type_name -> air.service.TemperatureRange
	7,  // 12: air.service.ReqConfigureSchedule.schedule:type_name -> air.service.Schedule
	18, // 13: air.service.AirConfig.outside:type_name -> air.service.AirConfig.Sensor
	20, // 14: air.service.AirConfig.sensors:type_name -> air.service.AirConfig.SensorsEntry
	21, // 15: air.service.AirConfig.hvacs:type_name -> air.service.AirConfig.HvacsEntry
	22, // 16: air.service.AirConfig.schedules:type_name -> air.service.AirConfig.SchedulesEntry
	0,  // 17: air.service.Hvac.State.mode:type_name -> air.service.Hvac.Mode
	1,  // 18: air.service.Hvac.State.fan:type_name -> air.service.Hvac.Fan
	3,  // 19: air.service.Schedule.Window.settings:type_name -> air.service.TemperatureRange
	6,  // 20: air.service.ServerState.RoomsEntry.value:type_name -> air.service.Room
	5,  // 21: air.service.ServerState.HvacsEntry.value:type_name -> air.service.Hvac
	7,  // 22: air.service.ServerState.SchedulesEntry.value:type_name -> air.service.Schedule
	23, // 23: air.service.AirConfig.Sensor.prometheusLabels:type_name -> air.service.AirConfig.Sensor.PrometheusLabelsEntry
	24, // 24: air.service.AirConfig.Hvac.prometheusLabels:type_name -> air.service.AirConfig.Hvac.PrometheusLabelsEntry
	18, // 25: air.service.AirConfig.SensorsEntry.value:type_name -> air.service.AirConfig.Sensor
	19, // 26: air.service.AirConfig.HvacsEntry.value:type_name -> air.service.AirConfig.Hvac
	7,  // 27: air.service.AirConfig.SchedulesEntry.value:type_name -> air.service.Schedule
	9,  // 28: air.service.AirSvc.GetAllStates:input_type -> air.service.ReqGetAllStates
	10, // 29: air.service.AirSvc.ConfigureRoom:input_type -> air.service.ReqConfigureRoom
	11, // 30: air.service.AirSvc.ConfigureSchedule:input_type -> air.service.ReqConfigureSchedule
	8,  // 31: air.service.AirSvc.GetAllStates:output_type -> air.service.ServerState
	8,  // 32: air.service.AirSvc.ConfigureRoom:output_type -> air.service.ServerState
	8,  // 33: air.service.AirSvc.ConfigureSchedule:output_type -> air.service.ServerState
	31, // [31:34] is the sub-list for method output_type
	28, // [28:31] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_air_proto_init() }
func file_air_proto_init() {
	if File_air_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_air_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hvac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Room); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetAllStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqConfigureRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqConfigureSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hvac_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule_Window); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirConfig_Sensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirConfig_Hvac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_air_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_air_proto_goTypes,
		DependencyIndexes: file_air_proto_depIdxs,
		EnumInfos:         file_air_proto_enumTypes,
		MessageInfos:      file_air_proto_msgTypes,
	}.Build()
	File_air_proto = out.File
	file_air_proto_rawDesc = nil
	file_air_proto_goTypes = nil
	file_air_proto_depIdxs = nil
}
