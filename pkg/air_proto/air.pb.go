// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: air.proto

package air_proto

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Control int32

const (
	Control_CONTROL_UNKNOWN Control = 0
	Control_CONTROL_AUTO    Control = 1
	Control_CONTROL_APP     Control = 2
	Control_CONTROL_REMOTE  Control = 3
)

// Enum value maps for Control.
var (
	Control_name = map[int32]string{
		0: "CONTROL_UNKNOWN",
		1: "CONTROL_AUTO",
		2: "CONTROL_APP",
		3: "CONTROL_REMOTE",
	}
	Control_value = map[string]int32{
		"CONTROL_UNKNOWN": 0,
		"CONTROL_AUTO":    1,
		"CONTROL_APP":     2,
		"CONTROL_REMOTE":  3,
	}
)

func (x Control) Enum() *Control {
	p := new(Control)
	*p = x
	return p
}

func (x Control) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Control) Descriptor() protoreflect.EnumDescriptor {
	return file_air_proto_enumTypes[0].Descriptor()
}

func (Control) Type() protoreflect.EnumType {
	return &file_air_proto_enumTypes[0]
}

func (x Control) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Control.Descriptor instead.
func (Control) EnumDescriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{0}
}

type HvacMode int32

const (
	HvacMode_MODE_UNKNOWN  HvacMode = 0
	HvacMode_MODE_OFF      HvacMode = 1
	HvacMode_MODE_FAN_ONLY HvacMode = 2
	HvacMode_MODE_COOL     HvacMode = 3
	HvacMode_MODE_HEAT     HvacMode = 4
	HvacMode_MODE_AUTO     HvacMode = 5
)

// Enum value maps for HvacMode.
var (
	HvacMode_name = map[int32]string{
		0: "MODE_UNKNOWN",
		1: "MODE_OFF",
		2: "MODE_FAN_ONLY",
		3: "MODE_COOL",
		4: "MODE_HEAT",
		5: "MODE_AUTO",
	}
	HvacMode_value = map[string]int32{
		"MODE_UNKNOWN":  0,
		"MODE_OFF":      1,
		"MODE_FAN_ONLY": 2,
		"MODE_COOL":     3,
		"MODE_HEAT":     4,
		"MODE_AUTO":     5,
	}
)

func (x HvacMode) Enum() *HvacMode {
	p := new(HvacMode)
	*p = x
	return p
}

func (x HvacMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HvacMode) Descriptor() protoreflect.EnumDescriptor {
	return file_air_proto_enumTypes[1].Descriptor()
}

func (HvacMode) Type() protoreflect.EnumType {
	return &file_air_proto_enumTypes[1]
}

func (x HvacMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HvacMode.Descriptor instead.
func (HvacMode) EnumDescriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{1}
}

type HvacFan int32

const (
	HvacFan_FAN_UNKNOWN HvacFan = 0
	HvacFan_FAN_AUTO    HvacFan = 1
	HvacFan_FAN_MEDIUM  HvacFan = 2
	HvacFan_FAN_HIGH    HvacFan = 3
)

// Enum value maps for HvacFan.
var (
	HvacFan_name = map[int32]string{
		0: "FAN_UNKNOWN",
		1: "FAN_AUTO",
		2: "FAN_MEDIUM",
		3: "FAN_HIGH",
	}
	HvacFan_value = map[string]int32{
		"FAN_UNKNOWN": 0,
		"FAN_AUTO":    1,
		"FAN_MEDIUM":  2,
		"FAN_HIGH":    3,
	}
)

func (x HvacFan) Enum() *HvacFan {
	p := new(HvacFan)
	*p = x
	return p
}

func (x HvacFan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HvacFan) Descriptor() protoreflect.EnumDescriptor {
	return file_air_proto_enumTypes[2].Descriptor()
}

func (HvacFan) Type() protoreflect.EnumType {
	return &file_air_proto_enumTypes[2]
}

func (x HvacFan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HvacFan.Descriptor instead.
func (HvacFan) EnumDescriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{2}
}

type RspListSensors_Sensor_Type int32

const (
	RspListSensors_Sensor_UNDEFINED  RspListSensors_Sensor_Type = 0
	RspListSensors_Sensor_STANDALONE RspListSensors_Sensor_Type = 1
	RspListSensors_Sensor_IN_UNIT    RspListSensors_Sensor_Type = 2
)

// Enum value maps for RspListSensors_Sensor_Type.
var (
	RspListSensors_Sensor_Type_name = map[int32]string{
		0: "UNDEFINED",
		1: "STANDALONE",
		2: "IN_UNIT",
	}
	RspListSensors_Sensor_Type_value = map[string]int32{
		"UNDEFINED":  0,
		"STANDALONE": 1,
		"IN_UNIT":    2,
	}
)

func (x RspListSensors_Sensor_Type) Enum() *RspListSensors_Sensor_Type {
	p := new(RspListSensors_Sensor_Type)
	*p = x
	return p
}

func (x RspListSensors_Sensor_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RspListSensors_Sensor_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_air_proto_enumTypes[3].Descriptor()
}

func (RspListSensors_Sensor_Type) Type() protoreflect.EnumType {
	return &file_air_proto_enumTypes[3]
}

func (x RspListSensors_Sensor_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RspListSensors_Sensor_Type.Descriptor instead.
func (RspListSensors_Sensor_Type) EnumDescriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{5, 0, 0}
}

type ReqListRooms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReqListRooms) Reset() {
	*x = ReqListRooms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqListRooms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqListRooms) ProtoMessage() {}

func (x *ReqListRooms) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqListRooms.ProtoReflect.Descriptor instead.
func (*ReqListRooms) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{0}
}

type RspListRooms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RspListRooms) Reset() {
	*x = RspListRooms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspListRooms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspListRooms) ProtoMessage() {}

func (x *RspListRooms) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspListRooms.ProtoReflect.Descriptor instead.
func (*RspListRooms) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{1}
}

type ReqListHvacs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room string `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *ReqListHvacs) Reset() {
	*x = ReqListHvacs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqListHvacs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqListHvacs) ProtoMessage() {}

func (x *ReqListHvacs) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqListHvacs.ProtoReflect.Descriptor instead.
func (*ReqListHvacs) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{2}
}

func (x *ReqListHvacs) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

type RspListHvacs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room  string   `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	Hvacs []string `protobuf:"bytes,2,rep,name=hvacs,proto3" json:"hvacs,omitempty"`
}

func (x *RspListHvacs) Reset() {
	*x = RspListHvacs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspListHvacs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspListHvacs) ProtoMessage() {}

func (x *RspListHvacs) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspListHvacs.ProtoReflect.Descriptor instead.
func (*RspListHvacs) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{3}
}

func (x *RspListHvacs) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *RspListHvacs) GetHvacs() []string {
	if x != nil {
		return x.Hvacs
	}
	return nil
}

type ReqListSensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room string `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *ReqListSensors) Reset() {
	*x = ReqListSensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqListSensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqListSensors) ProtoMessage() {}

func (x *ReqListSensors) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqListSensors.ProtoReflect.Descriptor instead.
func (*ReqListSensors) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{4}
}

func (x *ReqListSensors) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

type RspListSensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room    string                   `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	Sensors []*RspListSensors_Sensor `protobuf:"bytes,2,rep,name=sensors,proto3" json:"sensors,omitempty"`
}

func (x *RspListSensors) Reset() {
	*x = RspListSensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspListSensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspListSensors) ProtoMessage() {}

func (x *RspListSensors) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspListSensors.ProtoReflect.Descriptor instead.
func (*RspListSensors) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{5}
}

func (x *RspListSensors) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *RspListSensors) GetSensors() []*RspListSensors_Sensor {
	if x != nil {
		return x.Sensors
	}
	return nil
}

type ReqCheckRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room string `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (x *ReqCheckRoom) Reset() {
	*x = ReqCheckRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCheckRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCheckRoom) ProtoMessage() {}

func (x *ReqCheckRoom) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCheckRoom.ProtoReflect.Descriptor instead.
func (*ReqCheckRoom) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{6}
}

func (x *ReqCheckRoom) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

type RspCheckRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room                  string             `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	ActualTemperature     float64            `protobuf:"fixed64,2,opt,name=actualTemperature,proto3" json:"actualTemperature,omitempty"`
	InUnitTemperatures    map[string]float64 `protobuf:"bytes,3,rep,name=inUnitTemperatures,proto3" json:"inUnitTemperatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MinDesiredTemperature *float64           `protobuf:"fixed64,4,opt,name=minDesiredTemperature,proto3,oneof" json:"minDesiredTemperature,omitempty"`
	MaxDesiredTemperature *float64           `protobuf:"fixed64,5,opt,name=maxDesiredTemperature,proto3,oneof" json:"maxDesiredTemperature,omitempty"`
	Control               Control            `protobuf:"varint,6,opt,name=control,proto3,enum=air.service.Control" json:"control,omitempty"`
	Mode                  *HvacMode          `protobuf:"varint,7,opt,name=mode,proto3,enum=air.service.HvacMode,oneof" json:"mode,omitempty"`
	Fan                   *HvacFan           `protobuf:"varint,8,opt,name=fan,proto3,enum=air.service.HvacFan,oneof" json:"fan,omitempty"`
}

func (x *RspCheckRoom) Reset() {
	*x = RspCheckRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCheckRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCheckRoom) ProtoMessage() {}

func (x *RspCheckRoom) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCheckRoom.ProtoReflect.Descriptor instead.
func (*RspCheckRoom) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{7}
}

func (x *RspCheckRoom) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *RspCheckRoom) GetActualTemperature() float64 {
	if x != nil {
		return x.ActualTemperature
	}
	return 0
}

func (x *RspCheckRoom) GetInUnitTemperatures() map[string]float64 {
	if x != nil {
		return x.InUnitTemperatures
	}
	return nil
}

func (x *RspCheckRoom) GetMinDesiredTemperature() float64 {
	if x != nil && x.MinDesiredTemperature != nil {
		return *x.MinDesiredTemperature
	}
	return 0
}

func (x *RspCheckRoom) GetMaxDesiredTemperature() float64 {
	if x != nil && x.MaxDesiredTemperature != nil {
		return *x.MaxDesiredTemperature
	}
	return 0
}

func (x *RspCheckRoom) GetControl() Control {
	if x != nil {
		return x.Control
	}
	return Control_CONTROL_UNKNOWN
}

func (x *RspCheckRoom) GetMode() HvacMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return HvacMode_MODE_UNKNOWN
}

func (x *RspCheckRoom) GetFan() HvacFan {
	if x != nil && x.Fan != nil {
		return *x.Fan
	}
	return HvacFan_FAN_UNKNOWN
}

type ReqCheckHvac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hvac string `protobuf:"bytes,1,opt,name=hvac,proto3" json:"hvac,omitempty"`
}

func (x *ReqCheckHvac) Reset() {
	*x = ReqCheckHvac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCheckHvac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCheckHvac) ProtoMessage() {}

func (x *ReqCheckHvac) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCheckHvac.ProtoReflect.Descriptor instead.
func (*ReqCheckHvac) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{8}
}

func (x *ReqCheckHvac) GetHvac() string {
	if x != nil {
		return x.Hvac
	}
	return ""
}

type RspCheckHvac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hvac              string   `protobuf:"bytes,1,opt,name=hvac,proto3" json:"hvac,omitempty"`
	TargetTemperature float64  `protobuf:"fixed64,2,opt,name=targetTemperature,proto3" json:"targetTemperature,omitempty"`
	Mode              HvacMode `protobuf:"varint,3,opt,name=mode,proto3,enum=air.service.HvacMode" json:"mode,omitempty"`
	Fan               HvacFan  `protobuf:"varint,4,opt,name=fan,proto3,enum=air.service.HvacFan" json:"fan,omitempty"`
}

func (x *RspCheckHvac) Reset() {
	*x = RspCheckHvac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspCheckHvac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspCheckHvac) ProtoMessage() {}

func (x *RspCheckHvac) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspCheckHvac.ProtoReflect.Descriptor instead.
func (*RspCheckHvac) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{9}
}

func (x *RspCheckHvac) GetHvac() string {
	if x != nil {
		return x.Hvac
	}
	return ""
}

func (x *RspCheckHvac) GetTargetTemperature() float64 {
	if x != nil {
		return x.TargetTemperature
	}
	return 0
}

func (x *RspCheckHvac) GetMode() HvacMode {
	if x != nil {
		return x.Mode
	}
	return HvacMode_MODE_UNKNOWN
}

func (x *RspCheckHvac) GetFan() HvacFan {
	if x != nil {
		return x.Fan
	}
	return HvacFan_FAN_UNKNOWN
}

type ReqConfigureRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room                  string    `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	Control               Control   `protobuf:"varint,2,opt,name=control,proto3,enum=air.service.Control" json:"control,omitempty"`
	Mode                  *HvacMode `protobuf:"varint,3,opt,name=mode,proto3,enum=air.service.HvacMode,oneof" json:"mode,omitempty"`
	Fan                   *HvacFan  `protobuf:"varint,4,opt,name=fan,proto3,enum=air.service.HvacFan,oneof" json:"fan,omitempty"`
	MinDesiredTemperature *float64  `protobuf:"fixed64,5,opt,name=minDesiredTemperature,proto3,oneof" json:"minDesiredTemperature,omitempty"`
	MaxDesiredTemperature *float64  `protobuf:"fixed64,6,opt,name=maxDesiredTemperature,proto3,oneof" json:"maxDesiredTemperature,omitempty"`
}

func (x *ReqConfigureRoom) Reset() {
	*x = ReqConfigureRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqConfigureRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqConfigureRoom) ProtoMessage() {}

func (x *ReqConfigureRoom) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqConfigureRoom.ProtoReflect.Descriptor instead.
func (*ReqConfigureRoom) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{10}
}

func (x *ReqConfigureRoom) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *ReqConfigureRoom) GetControl() Control {
	if x != nil {
		return x.Control
	}
	return Control_CONTROL_UNKNOWN
}

func (x *ReqConfigureRoom) GetMode() HvacMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return HvacMode_MODE_UNKNOWN
}

func (x *ReqConfigureRoom) GetFan() HvacFan {
	if x != nil && x.Fan != nil {
		return *x.Fan
	}
	return HvacFan_FAN_UNKNOWN
}

func (x *ReqConfigureRoom) GetMinDesiredTemperature() float64 {
	if x != nil && x.MinDesiredTemperature != nil {
		return *x.MinDesiredTemperature
	}
	return 0
}

func (x *ReqConfigureRoom) GetMaxDesiredTemperature() float64 {
	if x != nil && x.MaxDesiredTemperature != nil {
		return *x.MaxDesiredTemperature
	}
	return 0
}

type RspConfigureRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room                  string    `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	Control               Control   `protobuf:"varint,2,opt,name=control,proto3,enum=air.service.Control" json:"control,omitempty"`
	Mode                  *HvacMode `protobuf:"varint,3,opt,name=mode,proto3,enum=air.service.HvacMode,oneof" json:"mode,omitempty"`
	Fan                   *HvacFan  `protobuf:"varint,4,opt,name=fan,proto3,enum=air.service.HvacFan,oneof" json:"fan,omitempty"`
	MinDesiredTemperature *float64  `protobuf:"fixed64,5,opt,name=minDesiredTemperature,proto3,oneof" json:"minDesiredTemperature,omitempty"`
	MaxDesiredTemperature *float64  `protobuf:"fixed64,6,opt,name=maxDesiredTemperature,proto3,oneof" json:"maxDesiredTemperature,omitempty"`
}

func (x *RspConfigureRoom) Reset() {
	*x = RspConfigureRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspConfigureRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspConfigureRoom) ProtoMessage() {}

func (x *RspConfigureRoom) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspConfigureRoom.ProtoReflect.Descriptor instead.
func (*RspConfigureRoom) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{11}
}

func (x *RspConfigureRoom) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *RspConfigureRoom) GetControl() Control {
	if x != nil {
		return x.Control
	}
	return Control_CONTROL_UNKNOWN
}

func (x *RspConfigureRoom) GetMode() HvacMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return HvacMode_MODE_UNKNOWN
}

func (x *RspConfigureRoom) GetFan() HvacFan {
	if x != nil && x.Fan != nil {
		return *x.Fan
	}
	return HvacFan_FAN_UNKNOWN
}

func (x *RspConfigureRoom) GetMinDesiredTemperature() float64 {
	if x != nil && x.MinDesiredTemperature != nil {
		return *x.MinDesiredTemperature
	}
	return 0
}

func (x *RspConfigureRoom) GetMaxDesiredTemperature() float64 {
	if x != nil && x.MaxDesiredTemperature != nil {
		return *x.MaxDesiredTemperature
	}
	return 0
}

type ReqConfigureHvac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hvac              string   `protobuf:"bytes,1,opt,name=hvac,proto3" json:"hvac,omitempty"`
	Mode              HvacMode `protobuf:"varint,2,opt,name=mode,proto3,enum=air.service.HvacMode" json:"mode,omitempty"`
	Fan               *HvacFan `protobuf:"varint,3,opt,name=fan,proto3,enum=air.service.HvacFan,oneof" json:"fan,omitempty"`
	TargetTemperature *float64 `protobuf:"fixed64,4,opt,name=targetTemperature,proto3,oneof" json:"targetTemperature,omitempty"`
}

func (x *ReqConfigureHvac) Reset() {
	*x = ReqConfigureHvac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqConfigureHvac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqConfigureHvac) ProtoMessage() {}

func (x *ReqConfigureHvac) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqConfigureHvac.ProtoReflect.Descriptor instead.
func (*ReqConfigureHvac) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{12}
}

func (x *ReqConfigureHvac) GetHvac() string {
	if x != nil {
		return x.Hvac
	}
	return ""
}

func (x *ReqConfigureHvac) GetMode() HvacMode {
	if x != nil {
		return x.Mode
	}
	return HvacMode_MODE_UNKNOWN
}

func (x *ReqConfigureHvac) GetFan() HvacFan {
	if x != nil && x.Fan != nil {
		return *x.Fan
	}
	return HvacFan_FAN_UNKNOWN
}

func (x *ReqConfigureHvac) GetTargetTemperature() float64 {
	if x != nil && x.TargetTemperature != nil {
		return *x.TargetTemperature
	}
	return 0
}

type RspConfigureHvac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hvac              string   `protobuf:"bytes,1,opt,name=hvac,proto3" json:"hvac,omitempty"`
	Mode              HvacMode `protobuf:"varint,2,opt,name=mode,proto3,enum=air.service.HvacMode" json:"mode,omitempty"`
	Fan               *HvacFan `protobuf:"varint,3,opt,name=fan,proto3,enum=air.service.HvacFan,oneof" json:"fan,omitempty"`
	TargetTemperature *float64 `protobuf:"fixed64,4,opt,name=targetTemperature,proto3,oneof" json:"targetTemperature,omitempty"`
}

func (x *RspConfigureHvac) Reset() {
	*x = RspConfigureHvac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspConfigureHvac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspConfigureHvac) ProtoMessage() {}

func (x *RspConfigureHvac) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspConfigureHvac.ProtoReflect.Descriptor instead.
func (*RspConfigureHvac) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{13}
}

func (x *RspConfigureHvac) GetHvac() string {
	if x != nil {
		return x.Hvac
	}
	return ""
}

func (x *RspConfigureHvac) GetMode() HvacMode {
	if x != nil {
		return x.Mode
	}
	return HvacMode_MODE_UNKNOWN
}

func (x *RspConfigureHvac) GetFan() HvacFan {
	if x != nil && x.Fan != nil {
		return *x.Fan
	}
	return HvacFan_FAN_UNKNOWN
}

func (x *RspConfigureHvac) GetTargetTemperature() float64 {
	if x != nil && x.TargetTemperature != nil {
		return *x.TargetTemperature
	}
	return 0
}

// For internal use only. Used to load init data from disk.
type AirConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rooms                   map[string]*AirConfig_Room `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OutsideSensorPromLabels map[string]string          `protobuf:"bytes,2,rep,name=outsideSensorPromLabels,proto3" json:"outsideSensorPromLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AirConfig) Reset() {
	*x = AirConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirConfig) ProtoMessage() {}

func (x *AirConfig) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirConfig.ProtoReflect.Descriptor instead.
func (*AirConfig) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{14}
}

func (x *AirConfig) GetRooms() map[string]*AirConfig_Room {
	if x != nil {
		return x.Rooms
	}
	return nil
}

func (x *AirConfig) GetOutsideSensorPromLabels() map[string]string {
	if x != nil {
		return x.OutsideSensorPromLabels
	}
	return nil
}

type RspListSensors_Sensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorType RspListSensors_Sensor_Type `protobuf:"varint,1,opt,name=sensorType,proto3,enum=air.service.RspListSensors_Sensor_Type" json:"sensorType,omitempty"`
	PromLabels map[string]string          `protobuf:"bytes,2,rep,name=promLabels,proto3" json:"promLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RspListSensors_Sensor) Reset() {
	*x = RspListSensors_Sensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspListSensors_Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspListSensors_Sensor) ProtoMessage() {}

func (x *RspListSensors_Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspListSensors_Sensor.ProtoReflect.Descriptor instead.
func (*RspListSensors_Sensor) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{5, 0}
}

func (x *RspListSensors_Sensor) GetSensorType() RspListSensors_Sensor_Type {
	if x != nil {
		return x.SensorType
	}
	return RspListSensors_Sensor_UNDEFINED
}

func (x *RspListSensors_Sensor) GetPromLabels() map[string]string {
	if x != nil {
		return x.PromLabels
	}
	return nil
}

type AirConfig_Room struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hvacs                 map[string]*AirConfig_Room_Hvac `protobuf:"bytes,1,rep,name=hvacs,proto3" json:"hvacs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefaultMinTemperature float64                         `protobuf:"fixed64,2,opt,name=defaultMinTemperature,proto3" json:"defaultMinTemperature,omitempty"`
	DefaultMaxTemperature float64                         `protobuf:"fixed64,3,opt,name=defaultMaxTemperature,proto3" json:"defaultMaxTemperature,omitempty"`
	SensorPromLabels      map[string]string               `protobuf:"bytes,5,rep,name=sensorPromLabels,proto3" json:"sensorPromLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AirConfig_Room) Reset() {
	*x = AirConfig_Room{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirConfig_Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirConfig_Room) ProtoMessage() {}

func (x *AirConfig_Room) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirConfig_Room.ProtoReflect.Descriptor instead.
func (*AirConfig_Room) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{14, 0}
}

func (x *AirConfig_Room) GetHvacs() map[string]*AirConfig_Room_Hvac {
	if x != nil {
		return x.Hvacs
	}
	return nil
}

func (x *AirConfig_Room) GetDefaultMinTemperature() float64 {
	if x != nil {
		return x.DefaultMinTemperature
	}
	return 0
}

func (x *AirConfig_Room) GetDefaultMaxTemperature() float64 {
	if x != nil {
		return x.DefaultMaxTemperature
	}
	return 0
}

func (x *AirConfig_Room) GetSensorPromLabels() map[string]string {
	if x != nil {
		return x.SensorPromLabels
	}
	return nil
}

type AirConfig_Room_Hvac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetModeMqttTopic           string `protobuf:"bytes,1,opt,name=SetModeMqttTopic,proto3" json:"SetModeMqttTopic,omitempty"`
	ReportModeMqttTopic        string `protobuf:"bytes,2,opt,name=reportModeMqttTopic,proto3" json:"reportModeMqttTopic,omitempty"`
	SetFanMqttTopic            string `protobuf:"bytes,3,opt,name=SetFanMqttTopic,proto3" json:"SetFanMqttTopic,omitempty"`
	ReportFanMqttTopic         string `protobuf:"bytes,4,opt,name=reportFanMqttTopic,proto3" json:"reportFanMqttTopic,omitempty"`
	SetTemperatureMqttTopic    string `protobuf:"bytes,5,opt,name=SetTemperatureMqttTopic,proto3" json:"SetTemperatureMqttTopic,omitempty"`
	ReportTemperatureMqttTopic string `protobuf:"bytes,6,opt,name=reportTemperatureMqttTopic,proto3" json:"reportTemperatureMqttTopic,omitempty"`
}

func (x *AirConfig_Room_Hvac) Reset() {
	*x = AirConfig_Room_Hvac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_air_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirConfig_Room_Hvac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirConfig_Room_Hvac) ProtoMessage() {}

func (x *AirConfig_Room_Hvac) ProtoReflect() protoreflect.Message {
	mi := &file_air_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirConfig_Room_Hvac.ProtoReflect.Descriptor instead.
func (*AirConfig_Room_Hvac) Descriptor() ([]byte, []int) {
	return file_air_proto_rawDescGZIP(), []int{14, 0, 0}
}

func (x *AirConfig_Room_Hvac) GetSetModeMqttTopic() string {
	if x != nil {
		return x.SetModeMqttTopic
	}
	return ""
}

func (x *AirConfig_Room_Hvac) GetReportModeMqttTopic() string {
	if x != nil {
		return x.ReportModeMqttTopic
	}
	return ""
}

func (x *AirConfig_Room_Hvac) GetSetFanMqttTopic() string {
	if x != nil {
		return x.SetFanMqttTopic
	}
	return ""
}

func (x *AirConfig_Room_Hvac) GetReportFanMqttTopic() string {
	if x != nil {
		return x.ReportFanMqttTopic
	}
	return ""
}

func (x *AirConfig_Room_Hvac) GetSetTemperatureMqttTopic() string {
	if x != nil {
		return x.SetTemperatureMqttTopic
	}
	return ""
}

func (x *AirConfig_Room_Hvac) GetReportTemperatureMqttTopic() string {
	if x != nil {
		return x.ReportTemperatureMqttTopic
	}
	return ""
}

var File_air_proto protoreflect.FileDescriptor

var file_air_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x69, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x22, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x76, 0x61, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x38, 0x0a, 0x0c, 0x52, 0x73,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x76, 0x61, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x68, 0x76, 0x61, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68,
	0x76, 0x61, 0x63, 0x73, 0x22, 0x24, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0xfd, 0x02, 0x0a, 0x0e, 0x52,
	0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x6d, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x1a,
	0x98, 0x02, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x73, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6d,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6d, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x02, 0x22, 0x22, 0x0a, 0x0c, 0x52, 0x65,
	0x71, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0xc2,
	0x04, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x61, 0x0a, 0x12, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x73, 0x70, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x49, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x12, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01,
	0x52, 0x15, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x69,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x48,
	0x02, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x03, 0x66, 0x61,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x46, 0x61, 0x6e, 0x48, 0x03, 0x52,
	0x03, 0x66, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x49, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x61, 0x78,
	0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x66, 0x61, 0x6e, 0x22, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48,
	0x76, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x76, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x76, 0x61, 0x63, 0x22, 0xa3, 0x01, 0x0a, 0x0c, 0x52, 0x73, 0x70, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x48, 0x76, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x76, 0x61, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x76, 0x61, 0x63, 0x12, 0x2c, 0x0a, 0x11,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x48, 0x76, 0x61, 0x63, 0x46, 0x61, 0x6e, 0x52, 0x03, 0x66, 0x61, 0x6e, 0x22, 0xee, 0x02,
	0x0a, 0x10, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x46, 0x61, 0x6e, 0x48, 0x01, 0x52, 0x03, 0x66, 0x61, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x02, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x15, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52,
	0x15, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x61, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d,
	0x69, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xee,
	0x02, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x46, 0x61, 0x6e, 0x48, 0x01, 0x52, 0x03, 0x66, 0x61,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03,
	0x52, 0x15, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x61, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0xcf, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x48, 0x76, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x76, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x76, 0x61, 0x63, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48,
	0x76, 0x61, 0x63, 0x46, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x66, 0x61, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x61, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xcf, 0x01, 0x0a, 0x10, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x48, 0x76, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x76, 0x61, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x76, 0x61, 0x63, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x66, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x48, 0x76, 0x61, 0x63, 0x46, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x66, 0x61, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52,
	0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x61, 0x6e, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xc4, 0x08, 0x0a, 0x09, 0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x37, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41,
	0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x6d, 0x0a, 0x17, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69,
	0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x17, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0xeb, 0x05, 0x0a, 0x04, 0x52, 0x6f,
	0x6f, 0x6d, 0x12, 0x3c, 0x0a, 0x05, 0x68, 0x76, 0x61, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x48,
	0x76, 0x61, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x68, 0x76, 0x61, 0x63, 0x73,
	0x12, 0x34, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x69, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4d, 0x61, 0x78, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61,
	0x78, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5d, 0x0a, 0x10,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0xb8, 0x02, 0x0a, 0x04,
	0x48, 0x76, 0x61, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d,
	0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x71,
	0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x4d, 0x71, 0x74, 0x74,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x65, 0x74,
	0x46, 0x61, 0x6e, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x12,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x61, 0x6e, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x61, 0x6e, 0x4d, 0x71, 0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x17,
	0x53, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x71,
	0x74, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x53,
	0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x71, 0x74,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x71, 0x74, 0x74, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x71, 0x74,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x5a, 0x0a, 0x0a, 0x48, 0x76, 0x61, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x6d,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a,
	0x0a, 0x1c, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x55, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10,
	0x03, 0x2a, 0x6a, 0x0a, 0x08, 0x48, 0x76, 0x61, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x05, 0x2a, 0x46, 0x0a,
	0x07, 0x48, 0x76, 0x61, 0x63, 0x46, 0x61, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x4e, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x4e,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x4e, 0x5f, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x4e, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x03, 0x32, 0x92, 0x05, 0x0a, 0x06, 0x41, 0x69, 0x72, 0x53, 0x76, 0x63,
	0x12, 0x56, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x19, 0x2e,
	0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x1a, 0x19, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x73, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x72, 0x6f,
	0x6f, 0x6d, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x76, 0x61, 0x63, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x76, 0x61, 0x63, 0x73,
	0x1a, 0x19, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x76, 0x61, 0x63, 0x73, 0x22, 0x13, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x68, 0x76, 0x61, 0x63, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x5e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12,
	0x1b, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x1a, 0x1b, 0x2e, 0x61,
	0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x73, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0f, 0x12, 0x0d, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x56, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x19, 0x2e,
	0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x6d, 0x1a, 0x19, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x73, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x6f, 0x6f, 0x6d, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x72, 0x6f,
	0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x56, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x48, 0x76, 0x61, 0x63, 0x12, 0x19, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x76, 0x61, 0x63,
	0x1a, 0x19, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x73, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x76, 0x61, 0x63, 0x22, 0x13, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x68, 0x76, 0x61, 0x63, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x63, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x6f,
	0x6d, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x6f, 0x6d,
	0x1a, 0x1d, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x73, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x22,
	0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x0c, 0x2f, 0x72, 0x6f, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x63, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x48, 0x76, 0x61, 0x63, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x48, 0x76, 0x61, 0x63, 0x1a, 0x1d, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x48, 0x76, 0x61, 0x63, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x0c, 0x2f, 0x68,
	0x76, 0x61, 0x63, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x74, 0x6f, 0x2f, 0x68, 0x6f, 0x6d, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x61, 0x69, 0x72, 0x3b, 0x61, 0x69, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_air_proto_rawDescOnce sync.Once
	file_air_proto_rawDescData = file_air_proto_rawDesc
)

func file_air_proto_rawDescGZIP() []byte {
	file_air_proto_rawDescOnce.Do(func() {
		file_air_proto_rawDescData = protoimpl.X.CompressGZIP(file_air_proto_rawDescData)
	})
	return file_air_proto_rawDescData
}

var file_air_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_air_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_air_proto_goTypes = []interface{}{
	(Control)(0),                    // 0: air.service.Control
	(HvacMode)(0),                   // 1: air.service.HvacMode
	(HvacFan)(0),                    // 2: air.service.HvacFan
	(RspListSensors_Sensor_Type)(0), // 3: air.service.RspListSensors.Sensor.Type
	(*ReqListRooms)(nil),            // 4: air.service.ReqListRooms
	(*RspListRooms)(nil),            // 5: air.service.RspListRooms
	(*ReqListHvacs)(nil),            // 6: air.service.ReqListHvacs
	(*RspListHvacs)(nil),            // 7: air.service.RspListHvacs
	(*ReqListSensors)(nil),          // 8: air.service.ReqListSensors
	(*RspListSensors)(nil),          // 9: air.service.RspListSensors
	(*ReqCheckRoom)(nil),            // 10: air.service.ReqCheckRoom
	(*RspCheckRoom)(nil),            // 11: air.service.RspCheckRoom
	(*ReqCheckHvac)(nil),            // 12: air.service.ReqCheckHvac
	(*RspCheckHvac)(nil),            // 13: air.service.RspCheckHvac
	(*ReqConfigureRoom)(nil),        // 14: air.service.ReqConfigureRoom
	(*RspConfigureRoom)(nil),        // 15: air.service.RspConfigureRoom
	(*ReqConfigureHvac)(nil),        // 16: air.service.ReqConfigureHvac
	(*RspConfigureHvac)(nil),        // 17: air.service.RspConfigureHvac
	(*AirConfig)(nil),               // 18: air.service.AirConfig
	(*RspListSensors_Sensor)(nil),   // 19: air.service.RspListSensors.Sensor
	nil,                             // 20: air.service.RspListSensors.Sensor.PromLabelsEntry
	nil,                             // 21: air.service.RspCheckRoom.InUnitTemperaturesEntry
	(*AirConfig_Room)(nil),          // 22: air.service.AirConfig.Room
	nil,                             // 23: air.service.AirConfig.RoomsEntry
	nil,                             // 24: air.service.AirConfig.OutsideSensorPromLabelsEntry
	(*AirConfig_Room_Hvac)(nil),     // 25: air.service.AirConfig.Room.Hvac
	nil,                             // 26: air.service.AirConfig.Room.HvacsEntry
	nil,                             // 27: air.service.AirConfig.Room.SensorPromLabelsEntry
}
var file_air_proto_depIdxs = []int32{
	19, // 0: air.service.RspListSensors.sensors:type_name -> air.service.RspListSensors.Sensor
	21, // 1: air.service.RspCheckRoom.inUnitTemperatures:type_name -> air.service.RspCheckRoom.InUnitTemperaturesEntry
	0,  // 2: air.service.RspCheckRoom.control:type_name -> air.service.Control
	1,  // 3: air.service.RspCheckRoom.mode:type_name -> air.service.HvacMode
	2,  // 4: air.service.RspCheckRoom.fan:type_name -> air.service.HvacFan
	1,  // 5: air.service.RspCheckHvac.mode:type_name -> air.service.HvacMode
	2,  // 6: air.service.RspCheckHvac.fan:type_name -> air.service.HvacFan
	0,  // 7: air.service.ReqConfigureRoom.control:type_name -> air.service.Control
	1,  // 8: air.service.ReqConfigureRoom.mode:type_name -> air.service.HvacMode
	2,  // 9: air.service.ReqConfigureRoom.fan:type_name -> air.service.HvacFan
	0,  // 10: air.service.RspConfigureRoom.control:type_name -> air.service.Control
	1,  // 11: air.service.RspConfigureRoom.mode:type_name -> air.service.HvacMode
	2,  // 12: air.service.RspConfigureRoom.fan:type_name -> air.service.HvacFan
	1,  // 13: air.service.ReqConfigureHvac.mode:type_name -> air.service.HvacMode
	2,  // 14: air.service.ReqConfigureHvac.fan:type_name -> air.service.HvacFan
	1,  // 15: air.service.RspConfigureHvac.mode:type_name -> air.service.HvacMode
	2,  // 16: air.service.RspConfigureHvac.fan:type_name -> air.service.HvacFan
	23, // 17: air.service.AirConfig.rooms:type_name -> air.service.AirConfig.RoomsEntry
	24, // 18: air.service.AirConfig.outsideSensorPromLabels:type_name -> air.service.AirConfig.OutsideSensorPromLabelsEntry
	3,  // 19: air.service.RspListSensors.Sensor.sensorType:type_name -> air.service.RspListSensors.Sensor.Type
	20, // 20: air.service.RspListSensors.Sensor.promLabels:type_name -> air.service.RspListSensors.Sensor.PromLabelsEntry
	26, // 21: air.service.AirConfig.Room.hvacs:type_name -> air.service.AirConfig.Room.HvacsEntry
	27, // 22: air.service.AirConfig.Room.sensorPromLabels:type_name -> air.service.AirConfig.Room.SensorPromLabelsEntry
	22, // 23: air.service.AirConfig.RoomsEntry.value:type_name -> air.service.AirConfig.Room
	25, // 24: air.service.AirConfig.Room.HvacsEntry.value:type_name -> air.service.AirConfig.Room.Hvac
	4,  // 25: air.service.AirSvc.ListRooms:input_type -> air.service.ReqListRooms
	6,  // 26: air.service.AirSvc.ListHvacs:input_type -> air.service.ReqListHvacs
	8,  // 27: air.service.AirSvc.ListSensors:input_type -> air.service.ReqListSensors
	10, // 28: air.service.AirSvc.CheckRoom:input_type -> air.service.ReqCheckRoom
	12, // 29: air.service.AirSvc.CheckHvac:input_type -> air.service.ReqCheckHvac
	14, // 30: air.service.AirSvc.ConfigureRoom:input_type -> air.service.ReqConfigureRoom
	16, // 31: air.service.AirSvc.ConfigureHvac:input_type -> air.service.ReqConfigureHvac
	5,  // 32: air.service.AirSvc.ListRooms:output_type -> air.service.RspListRooms
	7,  // 33: air.service.AirSvc.ListHvacs:output_type -> air.service.RspListHvacs
	9,  // 34: air.service.AirSvc.ListSensors:output_type -> air.service.RspListSensors
	11, // 35: air.service.AirSvc.CheckRoom:output_type -> air.service.RspCheckRoom
	13, // 36: air.service.AirSvc.CheckHvac:output_type -> air.service.RspCheckHvac
	15, // 37: air.service.AirSvc.ConfigureRoom:output_type -> air.service.RspConfigureRoom
	17, // 38: air.service.AirSvc.ConfigureHvac:output_type -> air.service.RspConfigureHvac
	32, // [32:39] is the sub-list for method output_type
	25, // [25:32] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_air_proto_init() }
func file_air_proto_init() {
	if File_air_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_air_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqListRooms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspListRooms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqListHvacs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspListHvacs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqListSensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspListSensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCheckRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCheckRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCheckHvac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspCheckHvac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqConfigureRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspConfigureRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqConfigureHvac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspConfigureHvac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspListSensors_Sensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirConfig_Room); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_air_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirConfig_Room_Hvac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_air_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_air_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_air_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_air_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_air_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_air_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_air_proto_goTypes,
		DependencyIndexes: file_air_proto_depIdxs,
		EnumInfos:         file_air_proto_enumTypes,
		MessageInfos:      file_air_proto_msgTypes,
	}.Build()
	File_air_proto = out.File
	file_air_proto_rawDesc = nil
	file_air_proto_goTypes = nil
	file_air_proto_depIdxs = nil
}
